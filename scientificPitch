#include <iostream>
#include <string>
#include <iomanip>

using namespace std;

bool isValidNote (string note) //bool int char
{
    if (note.length() != 2)
    {
        return false;
    }

    if (note[0] != 'A' && note[0] != 'B' && note[0] != 'C' && note[0] != 'D' && note[0] != 'E' && note[0] != 'F' &&note[0] != 'G')
    {
        return false;
    }
    else if (int(note[1]) <= 0 && int(note[1]) > 9)
    {
        return false;
    }
    else {
        return true;
    }
}

//function of return type boolean with parameter input of type string
bool tuneValid(string input)
{
    //since using a for loop, I want to create a variable to store the condition of the 
    //input, since if I used return true right away it would cause error
    bool result;
    //int dist is used to set the length of the substring I will be checking for each iteration
    int dist = 2;
    //iterate over the input, checking every other spot to start the isValidNote function
    for (int i = 0; i < input.length(); i += 2)
    {
        //check if the spot we are checking is a valid note
        if (isValidNote(input.substr(i, dist)))
        {
            //if it is, then keep bool result as true
            result = true;
        }
        else {
            //but if it isnt, set result to false and immediately return false as there is no
            //possible way for it to be true at the point
            result = false;
            return false;
        }
    }

    //this is to make sure we dont return true for a false tune (A4D100)
    return result;
}

double tuneSimilarity (string tune1, string tune2)
{
    //these are doubles to make the math later easier
    //amount of notes with same notes but not pitch
    double sameNote = 0;
    //amount of notes with same note AND pitch
    double samePitchNote = 0;
    //amount of different notes and pitches
    double diffNote = 0;
    //similarity to later be calculated/assigned
    double similarity;

    //using dist to set substring length for iterations
    int dist = 2;

    //if they aren't same length, automatically send 0
    if (tune1.length() != tune2.length())
    {
        return 0;
    }

    //iterate over both strings, use either tune1 length or tune2 since same length
    for (int i = 0; i < tune1.length(); i += 2)
    {
        //if the substring from i, dist (only one note) if the same as tune2 and tune1, then
        //they are the same note and pitch, so add to samePitchnote and sameNote
        if (tune1.substr(i, dist) == tune2.substr(i ,dist))
        {
            samePitchNote++;
            sameNote++;
        }
        //otherwise, if only the note is the same (A4, A6), then only add to sameNote but not 
        //pitch
        else if (tune1[i] == tune2[i])
        {
            sameNote++;
        }
        //else, if the notes arent the same AND the pitches are off, then different notes
        else if (tune1[i] != tune2[i] && int(tune1[i+1]) != int(tune2[i+1])){
            diffNote++;
        }
    }

    //DEBUGGING CODE
    /*cout << "Same pitchnotes " << samePitchNote << endl;
    cout << "Same pitches " << sameNote << endl;
    cout << "Different notes " << diffNote << endl;
    */
    // calculate the amount of notes in either tune1 or tune2 by taking their length
    //and dividing by 2
    double amountOfNotes = (tune1.length()) / 2;
    //calculate the similarity using the formula given in the problem question
    similarity = (sameNote / amountOfNotes) + samePitchNote - diffNote;

    //DEBUGGING CODE
    //cout << "Amount of notes " << amountOfNotes << endl;
    //cout << "Similarity is " << similarity << endl;
    
    return similarity;
}

//function bestSimilarity of return type double with parameters inputTune and targetTune (string)
double bestSimilarity(string inputTune, string targetTune)
{
    //this will keep track of the highest score
    double high = -100000000000;

    //if the target is bigger than the input, then automatically send 0
    if(targetTune.length() > inputTune.length())
    {
        return 0;
    }

    //iterate over the input string, every other character
    for (int i = 0; i < inputTune.length(); i += 2)
    {   
        //if the similarity of the substring from i and length target.length()
        //has a greater value than high, then that value returned from similar() is now 
        //high
        if (tuneSimilarity(inputTune.substr(i, targetTune.length()), targetTune) > high)
        {
            if (tuneSimilarity(inputTune.substr(i, targetTune.length()), targetTune) != 0)
            {
                high = tuneSimilarity(inputTune.substr(i, targetTune.length()), targetTune);
            }
            //cout << high << endl;
        }
    }

    //simply return high, as it has been tracking the highest scores
    return high;
}

void printTuneRankings(string tune1, string tune2, string tune3, string targetTune)
{
    double ranking1 = bestSimilarity(tune1, targetTune);
    double ranking2 = bestSimilarity(tune2, targetTune);
    double ranking3 = bestSimilarity(tune3, targetTune);
    /*cout << ranking1 << endl;
    cout << ranking2 << endl;
    cout << ranking3 << endl;
    */


    //RANKING FOR 1
    if (ranking1 == ranking2 && ranking1 == ranking3)
    {
        cout << "1) Tune 1, 2) Tune 2, 3) Tune 3" << endl;
    }
    else if (ranking1 >= ranking2 && ranking2 > ranking3)
    {
        cout << "1) Tune 1, 2) Tune 2, 3) Tune 3" << endl;
    }
    else if (ranking1 >= ranking3 && ranking3 > ranking2)
    {
        cout << "1) Tune 1, 2) Tune 3, 3) Tune 2" << endl;
    }
    else if (ranking1 == ranking2 && ranking1 < ranking3)
    {
        cout << "1) Tune 3, 2) Tune 1, 3) Tune 2" << endl;
    }
    else if (ranking1 > ranking2 && ranking2 == ranking3)
    {
        cout << "1) Tune 1, 2) Tune 2, 3) Tune 3" << endl;
    }

    //RANKING FOR 2
    else if (ranking2 >= ranking1 && ranking1 > ranking3)
    {
        cout << "1) Tune 2, 2) Tune 1, 3) Tune 3" << endl;
    }  
    else if (ranking2 >= ranking3 && ranking3 > ranking1)
    {
        cout << "1) Tune 2, 2) Tune 3, 3) Tune 1" << endl;
    }
    else if (ranking2 > ranking1 && ranking1 == ranking3)
    {
        cout << "1) Tune 2, 2) Tune 1, 3) Tune 3" << endl;
    }

    //RANKING FOR 3
    else if (ranking3 >= ranking1 && ranking1 > ranking2)
    {
        cout << "1) Tune 3, 2) Tune 1, 3) Tune 2" << endl;
    }
    else if (ranking3 >= ranking2 && ranking2 > ranking1)
    {
        cout << "1) Tune 3, 2) Tune 2, 3) Tune 1" << endl;
    }
        
}

int main ()
{
    cout << fixed << setprecision(2);

    //initializing variables for three tunes, target tunes
    string tune;
    string tune2;
    string tune3;
    string targetTune;
    int input;
    //while this is true, the menu will continue forever
    bool valid = true;
    
    //while the boolean is true, run the menu as many times as the user likes
    while (valid)
    {
    do 
    {
        //prompt the user with the menu
        cout << "--- Menu ---" << endl;
        cout << "1. Calculate similarity between two tunes." << endl;
        cout << "2. Calculate best similarity between two tunes of potentially different lengths." << endl;
        cout << "3. Print three input tunes in order from most to least similar to the target tune." << endl;
        cout << "4. Exit." << endl;
        cout << "Please enter your choice (1 - 4):" << endl;
        cin >> input;
    //check for valid input
        if (input < 1 || input > 4)
        {
            cout << "Invalid Input." << endl;
        }

    } while (input < 1 || input > 4);

    //each input if statement iwll be the same format, with different functions
    //first, cout the prompt, then make sure they are valid tunes
    //then output the function for the respective call
    if (input == 1)
    {
        cout << "Please enter the first tune: " << endl;
        do 
        {
            cin >> tune;
            if (!tuneValid(tune))
            {
                cout << "Invalid input. Please enter a tune in valid SPN:" << endl;
            }
        } while (!tuneValid(tune));

        cout << "Please enter the second tune: " << endl;
        do 
        {
            cin >> tune2;
            if (!tuneValid(tune2))
            {
                cout << "Invalid input. Please enter a tune in valid SPN:" << endl;
            }
        } while(!tuneValid(tune2));
 
        cout << "The similarity score is " << tuneSimilarity(tune, tune2) << endl;
    }
    else if (input == 2)
    {
        cout << "Please enter the input tune: " << endl;
        do 
        {
            cin >> tune;
            if (!tuneValid(tune))
            {
                cout << "Invalid input. Please enter a tune in valid SPN:" << endl;
            }
        } while (!tuneValid(tune));

        cout << "Please enter the target tune: " << endl;
        do 
        {
            cin >> tune2;
            if (!tuneValid(tune2))
            {
                cout << "Invalid input. Please enter a tune in valid SPN:" << endl;
            }
        } while(!tuneValid(tune2));

        cout << "The best similarity score is: " << bestSimilarity(tune, tune2) << endl;
    }

    else if (input == 3)
    {
        cout << "Please enter the first tune: " << endl;
        do 
        {
            cin >> tune;
            if (!tuneValid(tune))
            {
                cout << "Invalid input. Please enter a tune in valid SPN:" << endl;
            }
        } while(!tuneValid(tune));

        cout << "Please enter the second tune: " << endl;
        do 
        {
            cin >> tune2;
            if (!tuneValid(tune2))
            {
                cout << "Invalid input. Please enter a tune in valid SPN:" << endl;
            }
        } while(!tuneValid(tune2));

        cout << "Please enter the third tune: " << endl;
        do 
        {
            cin >> tune3;
            if (!tuneValid(tune3))
            {
                cout << "Invalid input. Please enter a tune in valid SPN:" << endl;
            }
        } while(!tuneValid(tune3));

        cout << "Please enter the target tune: " << endl;
        do 
        {
            cin >> targetTune;
            if (!tuneValid(targetTune))
            {
                cout << "Invalid input. Please enter a tune in valid SPN:" << endl;
            }
        } while(!tuneValid(targetTune));

        printTuneRankings(tune, tune2, tune3, targetTune);
    }

    else {
        cout << "Goodbye!" << endl;
        valid = false;
        return 0;
    }
    }
}
